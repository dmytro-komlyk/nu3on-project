// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Metadata {
  description String
  keywords    String
  title       String
}

type ImagesFile {
  destination   String
  encoding      String
  fieldname     String
  filename      String
  mimetype      String
  originalname  String
  path          String
  size          Int
}

type InfoCard {
  title         String
  description   String
}

model CardInProduct {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  preview            String
  image              Image           @relation(fields: [image_id], references: [id], name: "card_product_image")
  image_id           String          @db.ObjectId
  tags               String[]
  gallery            Image[]         @relation(fields: [gallery_ids], references: [id], name: "card_product_gallery")
  gallery_ids        String[]        @db.ObjectId
  info               InfoCard[]
  products_line      ProductInLine[] @relation(fields: [products_line_ids], references: [id], name: "product_line_cards")
  products_line_ids  String[]        @db.ObjectId

  @@map("cards_in_product")
}

model ProductInLine {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  slug          String
  title         String
  tagline       String
  description   String
  metadata      Metadata
  banner        Image             @relation(fields: [banner_id], references: [id], name: "product_banner")
  banner_id     String            @db.ObjectId
  cards         CardInProduct[]   @relation(fields: [cards_ids], references: [id], name: "product_line_cards")
  cards_ids     String[]          @db.ObjectId
  lines         Line[]            @relation(fields: [lines_ids], references: [id], name: "product_line")
  lines_ids     String[]          @db.ObjectId

  @@map("products_in_line")          
}

model Line {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  slug              String
  title             String
  description       String
  metadata          Metadata
  banner            Image             @relation(fields: [banner_id], references: [id], name: "line_banner")
  banner_id         String            @db.ObjectId
  products          ProductInLine[]   @relation(fields: [products_ids], references: [id], name: "product_line")
  products_ids      String[]          @db.ObjectId
  categories        Category[]        @relation(fields: [categories_ids], references: [id], name: "category_lines")
  categories_ids    String[]          @db.ObjectId

  @@map("lines")   
}

model ProductBooster {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  slug              String
  title             String
  tagline           String
  description       String
  metadata          Metadata
  categories        Category[]        @relation(fields: [categories_ids], references: [id], name: "products_booster_category")
  categories_ids    String[]          @db.ObjectId
 
  @@map("products_booster")          
}

model Category {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  slug                  String
  title                 String
  description           String
  metadata              Metadata
  lines                 Line[]           @relation(fields: [lines_ids], references: [id], name: "category_lines")
  lines_ids             String[]         @db.ObjectId
  products_booster      ProductBooster[] @relation(fields: [products_booster_ids], references: [id], name: "products_booster_category")
  products_booster_ids  String[]         @db.ObjectId

  @@map("categories")   
}

model Image {
  id                        String            @id @default(auto()) @map("_id") @db.ObjectId
  alt                       String
  file                      ImagesFile
  type                      String
  product_banner            ProductInLine[]   @relation("product_banner")
  line_banner               Line[]            @relation("line_banner")
  card_product_image        CardInProduct[]   @relation("card_product_image")
  card_product_gallery      CardInProduct[]   @relation(fields: [card_product_gallery_ids], references: [id], name: "card_product_gallery")
  card_product_gallery_ids  String[]          @db.ObjectId

  @@map("images")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
}
// model Account {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId
//   user_id            String  @db.ObjectId
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.String
//   access_token       String?  @db.String
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.String
//   session_state      String?

//   user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String  @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String  @unique
//   user_id      String  @db.ObjectId 
//   expires      DateTime
//   user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   id         String  @id @default(auto()) @map("_id") @db.ObjectId
//   token      String   @unique
//   expires    DateTime
// }